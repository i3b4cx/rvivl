#!/usr/bin/env python3
"""
Script to embed SPIR-V shader bytecode into C++ header file
Usage: embed_shaders.py vertex.spv fragment.spv output.h
"""

import sys
import os


def read_spirv_file(filename):
    """Read SPIR-V file and return as list of 32-bit integers"""
    with open(filename, 'rb') as f:
        data = f.read()

    # Ensure data length is multiple of 4 bytes
    if len(data) % 4 != 0:
        raise ValueError(
            f"SPIR-V file {filename} size is not multiple of 4 bytes")

    # Convert bytes to 32-bit integers
    integers = []
    for i in range(0, len(data), 4):
        # Read as little-endian 32-bit integer
        value = int.from_bytes(data[i:i+4], byteorder='little')
        integers.append(value)

    return integers


def generate_header(vertex_file, fragment_file, output_file):
    """Generate C++ header with embedded shader data"""

    vertex_data = read_spirv_file(vertex_file)
    fragment_data = read_spirv_file(fragment_file)

    header_content = f"""// Auto-generated shader data
// Do not edit this file manually
#pragma once

#include <vector>
#include <cstdint>

namespace Shaders {{

// Vertex shader SPIR-V bytecode
const std::vector<uint32_t> vertexShaderCode = {{
"""

    # Add vertex shader data
    for i, value in enumerate(vertex_data):
        if i % 8 == 0:
            header_content += "\n    "
        header_content += f"0x{value:08x},"
        if i < len(vertex_data) - 1:
            header_content += " "

    header_content += f"""
}};

// Fragment shader SPIR-V bytecode
const std::vector<uint32_t> fragmentShaderCode = {{
"""

    # Add fragment shader data
    for i, value in enumerate(fragment_data):
        if i % 8 == 0:
            header_content += "\n    "
        header_content += f"0x{value:08x},"
        if i < len(fragment_data) - 1:
            header_content += " "

    header_content += f"""
}};

}} // namespace Shaders
"""

    with open(output_file, 'w') as f:
        f.write(header_content)

    print(f"Generated {output_file} with embedded shaders")
    print(f"  Vertex shader: {len(vertex_data)} words")
    print(f"  Fragment shader: {len(fragment_data)} words")


if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: embed_shaders.py vertex.spv fragment.spv output.h")
        sys.exit(1)

    vertex_file = sys.argv[1]
    fragment_file = sys.argv[2]
    output_file = sys.argv[3]

    try:
        generate_header(vertex_file, fragment_file, output_file)
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)
